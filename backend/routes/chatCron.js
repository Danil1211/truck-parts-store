// jobs/checkMissedChats.js
const { User, Message } = require('../models/models'); // —É —Ç–µ–±—è –≤–µ–∑–¥–µ ../models/models

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö" —á–∞—Ç–æ–≤
 * - new | waiting | active ‚Üí –µ—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
 *   —Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç ‚Üí —Å—Ç–∞—Ç—É—Å missed
 * - –ø–ª—é—Å –∞–≤—Ç–æ-—Å–±—Ä–æ—Å –æ–Ω–ª–∞–π–Ω, –µ—Å–ª–∏ lastOnlineAt —Å—Ç–∞—Ä—à–µ 70—Å
 */
async function checkMissedChats() {
  const TWO_MIN = 2 * 60 * 1000;
  const now = Date.now();

  try {
    const users = await User.find({
      status: { $in: ['new', 'waiting', 'active'] },
    }).select('_id status lastMessageAt adminLastReadAt phone lastOnlineAt isOnline');

    for (const user of users) {
      // –∞–≤—Ç–æ-–æ—Ñ–ª–∞–π–Ω
      if (user.isOnline && user.lastOnlineAt && now - new Date(user.lastOnlineAt).getTime() > 70_000) {
        user.isOnline = false;
        await user.save().catch(() => {});
      }

      if (!user.lastMessageAt) continue;

      const lastClientMsg = new Date(user.lastMessageAt).getTime();
      const lastAdminRead = user.adminLastReadAt ? new Date(user.adminLastReadAt).getTime() : 0;

      const clientHasUnseenMsg = lastClientMsg > lastAdminRead;
      const overdue = now - lastClientMsg > TWO_MIN;

      if (clientHasUnseenMsg && overdue) {
        // –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const hasAdminReplyAfter = await Message.exists({
          user: user._id,
          fromAdmin: true,
          createdAt: { $gt: user.lastMessageAt }
        });

        if (!hasAdminReplyAfter) {
          user.status = 'missed';
          await user.save();
          console.log(`üü† –ß–∞—Ç ${user.phone || user._id} -> missed`);
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ checkMissedChats:', err);
  }
}

module.exports = { checkMissedChats };
