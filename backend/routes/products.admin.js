// routes/products.admin.js
const express = require('express');
const router = express.Router();

const { Product, Group } = require('../models');
const { authMiddleware } = require('../protected');
const withTenant = require('../middleware/withTenant');

// –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–¥–µ—Å—å ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
router.use(withTenant);

/**
 * GET /api/products/admin
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *  q           - —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (regex, i)
 *  group       - –ò–î –≥—Ä—É–ø–ø—ã (—É —Ç–µ–±—è product.group —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π)
 *  groupId     - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞)
 *  inStock     - "true" | "false"
 *  page        - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1)
 *  limit       - —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (20)
 *
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
 *   inStock === "true" —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ availability === "–í –Ω–∞–ª–∏—á–∏–∏"
 *   inStock === "false" —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ availability !== "–í –Ω–∞–ª–∏—á–∏–∏"
 */
router.get('/admin', authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const {
      q = '',
      group = '',
      groupId = '',
      inStock = '',
      page = 1,
      limit = 20,
    } = req.query;

    const pageNum = Math.max(1, parseInt(page, 10) || 1);
    const limitNum = Math.max(1, Math.min(100, parseInt(limit, 10) || 20));
    const skip = (pageNum - 1) * limitNum;

    const filter = {
      tenantId: req.tenantId, // üëà —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É
    };

    if (q) {
      filter.name = { $regex: q.trim(), $options: 'i' };
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const groupFilter = (groupId || group || '').trim();
    if (groupFilter) {
      filter.group = groupFilter; // —É —Ç–µ–±—è group –≤ —Ç–æ–≤–∞—Ä–µ ‚Äî —Å—Ç—Ä–æ–∫–∞
    }

    // –§–∏–ª—å—Ç—Ä –Ω–∞–ª–∏—á–∏—è –ø–æ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—è availability
    if (inStock === 'true') {
      filter.availability = '–í –Ω–∞–ª–∏—á–∏–∏';
    } else if (inStock === 'false') {
      filter.availability = { $ne: '–í –Ω–∞–ª–∏—á–∏–∏' };
    }

    const [items, total] = await Promise.all([
      Product.find(filter)
        .select('name price images availability group')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limitNum)
        .lean(),
      Product.countDocuments(filter),
    ]);

    res.json({
      items,
      total,
      page: pageNum,
      pages: Math.ceil(total / limitNum) || 1,
    });
  } catch (e) {
    console.error('products.admin list error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * GET /api/products/groups
 * –ì—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤).
 */
router.get('/groups', authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const groups = await Group.find({ tenantId: req.tenantId }) // üëà –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É
      .select('name parentId')
      .sort({ order: 1 })
      .lean();

    res.json(groups || []);
  } catch (e) {
    console.error('products.admin groups error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
